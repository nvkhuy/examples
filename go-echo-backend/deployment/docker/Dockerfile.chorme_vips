FROM --platform=linux/amd64 thaitanloi365/golang-bullseye:latest as builder

LABEL maintainer="Thai Tan Loi <thaitanloi365@gmail.com>"

ARG SERVICE_NAME=
ARG ENV=
ARG BUILD_NUMBER=
ARG BUILD_VERSION=
ARG BUILD_TIMESTAMP=

ENV SERVICE_NAME=${SERVICE_NAME}
ENV ENV=${ENV}
ENV BUILD_VERSION=${BUILD_VERSION}
ENV BUILD_TIMESTAMP=${BUILD_TIMESTAMP}
ENV BUILD_NUMBER=${BUILD_NUMBER}

RUN echo "SERVICE_NAME=${SERVICE_NAME} ENV=${ENV} BUILD_NUMBER=${BUILD_NUMBER} BUILD_VERSION=${BUILD_VERSION} BUILD_TIMESTAMP=${BUILD_TIMESTAMP}"

WORKDIR /app

COPY . .

ENV GOOS=linux
ENV GOARCH=amd64

RUN go mod download

RUN if [ "${ENV}" = "local" ] ; then \
  echo "Skip Local";\
  else \
  mkdir -p distribution;\
  cp -rf services/${SERVICE_NAME}/docs distribution;\
  cp -rf static distribution;\
  cp -rf deployment/docker/entrypoint.sh distribution/entrypoint.sh;\
    if [ -d ".git" ] ; then\
        GOOS=linux GOARCH=amd64 govvv build -a -o distribution/main  \
        -ldflags "-s -w -h -X 'main.ServiceName=${SERVICE_NAME}' \
        -X 'main.BuildEnv=${ENV}' \
        -X 'main.BuildVersion=${BUILD_VERSION}' \
        -X 'main.BuildNumer=${BUILD_NUMBER}'" \
        ./cmd/${SERVICE_NAME};\
    else \
        GOOS=linux GOARCH=amd64 go build -a -o distribution/main  \
        -ldflags "-s -w -h -X 'main.ServiceName=${SERVICE_NAME}' \
        -X 'main.BuildEnv=${ENV}' \
        -X 'main.BuildVersion=${BUILD_VERSION}' \
        -X 'main.BuildNumer=${BUILD_NUMBER}'" \
        ./cmd/${SERVICE_NAME};\
    fi;\
  fi
  

# Production stage
# FROM --platform=linux/amd64 debian:bullseye-slim
FROM --platform=linux/amd64 thaitanloi365/chrome_debian

ARG SERVICE_NAME=
ARG ENV=
ARG BUILD_VERSION=
ARG BUILD_TIMESTAMP=

ENV SERVICE_NAME=${SERVICE_NAME}
ENV ENV=${ENV}
ENV BUILD_VERSION=${BUILD_VERSION}
ENV BUILD_TIMESTAMP=${BUILD_TIMESTAMP}


COPY --from=builder /usr/local/lib /usr/local/lib
COPY --from=builder /etc/ssl/certs /etc/ssl/certs

# Install runtime dependencies
RUN DEBIAN_FRONTEND=noninteractive \
  apt-get update && \
  apt-get install --no-install-recommends -y \
  jq procps libglib2.0-0 libjpeg62-turbo libpng16-16 libopenexr25 libatk1.0-0 \
  libwebp6 libwebpmux3 libwebpdemux2 libtiff5 libgif7 libexif12 libxml2 libpoppler-glib8 \
  libmagickwand-6.q16-6 libpango1.0-0 libmatio11 libopenslide0 libjemalloc2 \
  libgsf-1-114 fftw3 liborc-0.4-0 librsvg2-2 libcfitsio9 libimagequant0 libheif1 && \
  ln -s /usr/lib/$(uname -m)-linux-gnu/libjemalloc.so.2 /usr/local/lib/libjemalloc.so && \
  apt-get autoremove -y && \
  apt-get autoclean && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
ENV LD_PRELOAD=/usr/local/lib/libjemalloc.so

RUN which google-chrome

WORKDIR /app

COPY --from=builder /app/distribution/ ./

RUN chmod +x ./entrypoint.sh

ENTRYPOINT ["/bin/sh","/app/entrypoint.sh"]

CMD /app/main --config=/app/$ENV.json serve



