definitions:
  errs.Error:
    properties:
      code:
        type: integer
      header:
        type: integer
      message:
        type: string
    type: object
  location.Coordinate:
    properties:
      address_number:
        type: string
      country_code:
        type: string
      formatted_address:
        type: string
      lat:
        type: number
      level_1:
        type: string
      level_2:
        type: string
      level_3:
        type: string
      level_4:
        type: string
      lng:
        type: number
      postal_code:
        type: string
      street:
        type: string
    type: object
  models.Attachment:
    properties:
      content_type:
        type: string
      file_key:
        type: string
      file_name:
        type: string
      file_url:
        type: string
      metadata:
        additionalProperties: true
        type: object
      thumbnail_url:
        type: string
    required:
    - file_key
    type: object
  models.Attachments:
    items:
      $ref: '#/definitions/models.Attachment'
    type: array
  models.BuyerApproveInquiryQuotationForm:
    properties:
      approve_comment:
        type: string
      inquiry_id:
        type: string
      inquiry_sku_id:
        type: string
      userID:
        type: string
    required:
    - inquiry_id
    - inquiry_sku_id
    type: object
  models.BuyerQuotationForm:
    properties:
      inquiry_sku_id:
        type: string
      price:
        type: number
      price_type:
        type: string
      tax_rate:
        type: number
    type: object
  models.BuyerRejectInquiryQuotationForm:
    properties:
      inquiry_id:
        type: string
      inquiry_sku_id:
        type: string
      reject_meta:
        $ref: '#/definitions/models.JsonMetaData'
        type: object
      reject_reason:
        type: string
      userID:
        type: string
    required:
    - inquiry_id
    - inquiry_sku_id
    - reject_meta
    - reject_reason
    type: object
  models.Cart:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  models.CartCreateForm:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemCreateForm'
        type: array
    required:
    - items
    type: object
  models.CartItem:
    properties:
      cart_id:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
        type: object
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: integer
      variant:
        $ref: '#/definitions/models.Variant'
        type: object
      variant_id:
        type: string
    type: object
  models.CartItemCreateForm:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
      variant_id:
        type: string
    required:
    - product_id
    - quantity
    - variant_id
    type: object
  models.CartItemUpdateForm:
    properties:
      quantity:
        type: integer
    required:
    - quantity
    type: object
  models.CartItemsCreateForm:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemCreateForm'
        type: array
    required:
    - items
    type: object
  models.CartItemsRemoveForm:
    properties:
      item_ids:
        items:
          type: string
        type: array
    required:
    - item_ids
    type: object
  models.CartUpdateForm:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemCreateForm'
        type: array
    type: object
  models.Category:
    properties:
      category_type:
        type: string
      children:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      created_at:
        type: integer
      deleted_at:
        type: integer
      icon:
        $ref: '#/definitions/models.Attachment'
        description: Photo
        type: object
      id:
        description: Model
        type: string
      name:
        type: string
      order:
        type: integer
      parent_category_id:
        type: string
      slug:
        type: string
      updated_at:
        type: integer
    type: object
  models.CategoryUpdateForm:
    properties:
      category_type:
        type: string
      icon:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      parent_category_id:
        type: string
      slug:
        type: string
    type: object
  models.ChatMessage:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      chat_room:
        $ref: '#/definitions/models.ChatRoom'
        type: object
      chat_room_id:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      message:
        type: string
      message_type:
        type: string
      receiver_as_group:
        $ref: '#/definitions/models.ChatRoom'
        description: MessageType = Group
        type: object
      receiver_as_user:
        $ref: '#/definitions/models.User'
        description: MessageType = User
        type: object
      receiver_id:
        type: string
      seen_at:
        type: integer
      sender:
        $ref: '#/definitions/models.User'
        type: object
      sender_id:
        type: string
      updated_at:
        type: integer
    type: object
  models.ChatMessageCreateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      chat_room_id:
        type: string
      id:
        type: string
      message:
        type: string
      message_type:
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
    required:
    - attachments
    - chat_room_id
    - message_type
    - receiver_id
    type: object
  models.ChatMessageSeenForm:
    properties:
      message_id:
        type: string
      message_type:
        type: string
      receiver_id:
        type: string
    required:
    - message_type
    - receiver_id
    type: object
  models.ChatMessageUpdateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      id:
        type: string
      message:
        type: string
    required:
    - attachments
    - id
    type: object
  models.ChatRoom:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      host_id:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: integer
    type: object
  models.ChatRoomCreateForm:
    properties:
      host_id:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.ChatRoomUpdateForm:
    properties:
      host_id:
        type: string
      name:
        type: string
    type: object
  models.CheckExistsForm:
    properties:
      email:
        type: string
      phone_number:
        type: string
      user_name:
        type: string
    type: object
  models.CheckoutCreateForm:
    properties:
      currency:
        type: string
      items:
        $ref: '#/definitions/models.CheckoutItemsCreateForm'
        type: object
      payment_method_id:
        type: string
      reference_id:
        type: string
    required:
    - currency
    - items
    - payment_method_id
    type: object
  models.CheckoutItemCreateForm:
    properties:
      name:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      shop_id:
        type: string
      unit_amount:
        type: number
      variant_id:
        type: string
    required:
    - name
    - product_id
    - quantity
    - shop_id
    - unit_amount
    - variant_id
    type: object
  models.CheckoutItemsCreateForm:
    items:
      $ref: '#/definitions/models.CheckoutItemCreateForm'
    type: array
  models.CmsNotification:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      message:
        type: string
      metadata:
        $ref: '#/definitions/models.NotificationMetadata'
        type: object
      notification_type:
        type: string
      seen_at:
        type: integer
      updated_at:
        type: integer
    type: object
  models.Collection:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      product_groups:
        items:
          $ref: '#/definitions/models.CollectionProductGroup'
        type: array
      updated_at:
        type: integer
    type: object
  models.CollectionProductGroup:
    properties:
      collection_id:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      name:
        type: string
      product_ids:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      updated_at:
        type: integer
    type: object
  models.CollectionProductGroupUpdateForm:
    properties:
      description:
        type: string
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      name:
        type: string
      product_ids:
        type: string
    type: object
  models.CollectionProductIDsForm:
    properties:
      products:
        items:
          type: string
        type: array
    type: object
  models.CollectionUpdateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      description:
        type: string
      name:
        type: string
      product_groups:
        items:
          $ref: '#/definitions/models.CollectionProductGroupUpdateForm'
        type: array
    type: object
  models.Comment:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      content:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      target_id:
        type: string
      target_type:
        type: string
      updated_at:
        type: integer
      user:
        $ref: '#/definitions/models.User'
        type: object
      user_id:
        type: string
    required:
    - content
    - target_id
    - target_type
    - user_id
    type: object
  models.ContentCommentCreateForm:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  models.Coordinate:
    properties:
      address_id:
        description: 'Address: just use for query in BE'
        type: string
      address_name:
        type: string
      address_number:
        type: string
      address_type:
        type: string
      country_code:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      formatted_address:
        type: string
      id:
        type: string
      lat:
        type: number
      level_1:
        type: string
      level_2:
        type: string
      level_3:
        type: string
      level_4:
        type: string
      lng:
        type: number
      postal_code:
        type: string
      street:
        type: string
      updated_at:
        type: integer
    type: object
  models.DeliveryAttribute:
    properties:
      attribute:
        type: string
      value:
        type: string
    type: object
  models.DeliveryAttributes:
    items:
      $ref: '#/definitions/models.DeliveryAttribute'
    type: array
  models.FactoryTour:
    properties:
      company:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      reason:
        type: string
      status:
        type: string
      updated_at:
        type: integer
    required:
    - email
    type: object
  models.FactoryTourUpdateForm:
    properties:
      company:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      reason:
        type: string
      status:
        type: string
    required:
    - email
    type: object
  models.Faq:
    properties:
      body:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      faq_type:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: integer
    type: object
  models.FaqUpdateForm:
    properties:
      body:
        type: string
      faq_type:
        type: string
      title:
        type: string
    type: object
  models.ForgotPasswordForm:
    properties:
      email:
        type: string
      redirect_url:
        type: string
    required:
    - email
    - redirect_url
    type: object
  models.ForgotPasswordResponse:
    properties:
      email:
        type: string
      message:
        type: string
      next_in_seconds:
        type: integer
      redirect_url:
        type: string
    type: object
  models.Inquiry:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      buyer_quotation_status:
        type: string
      category:
        $ref: '#/definitions/models.Category'
        type: object
      category_id:
        type: string
      created_at:
        type: integer
      currency:
        type: string
      deleted_at:
        type: integer
      delivery_date:
        description: date when admin send quotation
        type: integer
      design:
        $ref: '#/definitions/models.Attachments'
        type: object
      document:
        $ref: '#/definitions/models.Attachments'
        type: object
      expired_date:
        type: integer
      id:
        type: string
      inquiry_skus:
        items:
          $ref: '#/definitions/models.InquirySku'
        type: array
      inquiry_type:
        type: string
      new_seen_at:
        type: integer
      order_reference_id:
        type: string
      product_attributes:
        $ref: '#/definitions/models.JsonArrayMetaData'
        description: size, color, fabric, composition
        type: object
      production_lead_time:
        description: 'time when admin send quotation, unit: days'
        type: integer
      reference_id:
        type: string
      requirement:
        type: string
      status:
        type: string
      title:
        type: string
      update_seen_at:
        type: integer
      updated_at:
        type: integer
      user:
        $ref: '#/definitions/models.User'
        type: object
      user_id:
        type: string
    required:
    - title
    - user_id
    type: object
  models.InquiryBuyer:
    properties:
      attachment:
        $ref: '#/definitions/models.Attachment'
        type: object
      created_at:
        type: integer
      currency:
        type: string
      id:
        type: string
      inquiry:
        $ref: '#/definitions/models.Inquiry'
        type: object
      inquiry_id:
        type: string
      price:
        type: number
      price_type:
        type: string
      status:
        type: string
      sub_total:
        type: number
      tax_rate:
        type: number
      total:
        type: number
      updated_at:
        type: integer
      user:
        $ref: '#/definitions/models.User'
        type: object
      user_id:
        type: string
    type: object
  models.InquiryCreateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      category_id:
        type: string
      currency:
        type: string
      expired_date:
        type: integer
      inquiry_skus:
        items:
          $ref: '#/definitions/models.InquirySkuCreateForm'
        type: array
      inquiry_type:
        type: string
      product_attributes:
        $ref: '#/definitions/models.JsonArrayMetaData'
        type: object
      requirement:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  models.InquiryCreateWithoutLoginForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      brand_name:
        type: string
      category_id:
        type: string
      currency:
        type: string
      email:
        type: string
      expired_date:
        type: integer
      inquiry_skus:
        items:
          $ref: '#/definitions/models.InquirySkuCreateForm'
        type: array
      inquiry_type:
        type: string
      name:
        type: string
      phone_number:
        type: string
      product_attributes:
        $ref: '#/definitions/models.JsonArrayMetaData'
        type: object
      requirement:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - brand_name
    - email
    - name
    - title
    type: object
  models.InquirySeller:
    properties:
      created_at:
        type: integer
      delivery_date:
        type: integer
      due_day:
        type: integer
      id:
        type: string
      inquiry:
        $ref: '#/definitions/models.Inquiry'
        type: object
      inquiry_id:
        type: string
      inquiry_seller_skus:
        items:
          $ref: '#/definitions/models.InquirySellerSku'
        type: array
      order_reference_id:
        type: string
      seller_quotation_status:
        type: string
      shop:
        $ref: '#/definitions/models.Shop'
        type: object
      shop_id:
        type: string
      status:
        type: string
      updated_at:
        type: integer
    type: object
  models.InquirySellerCreateQuatationParams:
    properties:
      delivery_date:
        type: integer
      quotations:
        items:
          $ref: '#/definitions/models.SellerQuatationPerSkuForm'
        type: array
    type: object
  models.InquirySellerSku:
    properties:
      created_at:
        type: integer
      currency:
        type: string
      due_day:
        type: integer
      id:
        type: string
      inquiry_seller_id:
        type: string
      inquiry_sku_id:
        type: string
      price:
        type: number
      price_type:
        type: string
      status:
        type: string
      updated_at:
        type: integer
    type: object
  models.InquirySku:
    properties:
      approve_comment:
        type: string
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      created_at:
        type: integer
      currency:
        type: string
      deleted_at:
        type: integer
      id:
        type: string
      inquiry_id:
        type: string
      parent_sku:
        type: string
      price:
        type: number
      price_type:
        type: string
      product_attributes:
        $ref: '#/definitions/models.JsonArrayMetaData'
        description: size, color, fabric, composition, material
        type: object
      quantity:
        type: integer
      quantity_unit:
        type: string
      quotation_approved_at:
        type: integer
      quotation_at:
        type: integer
      quotation_price:
        type: number
      quotation_price_type:
        type: string
      quotation_tax_rate:
        type: number
      reject_meta:
        $ref: '#/definitions/models.JsonMetaData'
        type: object
      reject_reason:
        type: string
      status:
        type: string
      supplier_sku:
        type: string
      updated_at:
        type: integer
    type: object
  models.InquirySkuCreateForm:
    properties:
      currency:
        type: string
      inquiry_id:
        type: string
      parent_sku:
        type: string
      price:
        type: number
      price_type:
        type: string
      product_attributes:
        $ref: '#/definitions/models.JsonArrayMetaData'
        description: size, color, fabric, composition, material
        type: object
      quantity:
        type: integer
      quantity_unit:
        type: string
      status:
        type: string
      supplier_sku:
        type: string
    type: object
  models.InquiryUpdateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      category_id:
        type: string
      currency:
        type: string
      design:
        $ref: '#/definitions/models.Attachments'
        type: object
      document:
        $ref: '#/definitions/models.Attachments'
        type: object
      expired_date:
        type: integer
      product_attributes:
        $ref: '#/definitions/models.JsonArrayMetaData'
        type: object
      requirement:
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  models.JsonArrayMetaData:
    items:
      type: object
    type: array
  models.JsonMetaData:
    additionalProperties: true
    type: object
  models.Label:
    properties:
      accessory:
        type: string
      barcode_dimension:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      design_file:
        $ref: '#/definitions/models.Attachment'
        type: object
      due_date:
        type: integer
      id:
        type: string
      label_dimension:
        type: string
      label_kind:
        type: string
      material:
        type: string
      name:
        type: string
      order_id:
        type: string
      pdf_file:
        $ref: '#/definitions/models.Attachment'
        type: object
      preview_file:
        $ref: '#/definitions/models.Attachment'
        type: object
      printing_date:
        type: integer
      printing_shop:
        type: string
      quantity:
        type: integer
      size:
        type: string
      sku:
        type: string
      status:
        type: string
      update_reason:
        type: string
      updated_at:
        type: integer
    type: object
  models.LabelCreateForm:
    properties:
      accessory:
        type: string
      barcode_dimension:
        type: string
      design_file:
        $ref: '#/definitions/models.Attachment'
        type: object
      due_date:
        type: integer
      label_dimension:
        type: string
      label_kind:
        type: string
      material:
        type: string
      name:
        type: string
      order_id:
        type: string
      preview_file:
        $ref: '#/definitions/models.Attachment'
        type: object
      printing_date:
        type: integer
      printing_shop:
        type: string
      quantity:
        type: integer
      size:
        type: string
      sku:
        type: string
      status:
        type: string
      update_reason:
        type: string
    type: object
  models.LoginEmailForm:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
        type: object
    type: object
  models.M:
    additionalProperties: true
    type: object
  models.MetafieldUpdateForm:
    properties:
      data_type:
        type: string
      description:
        type: string
      id:
        type: string
      key:
        type: string
      namespace:
        type: string
      owner_id:
        type: string
      owner_resource:
        type: string
      value:
        type: string
    type: object
  models.NotificationMetadata:
    properties:
      inquiry_id:
        type: string
    type: object
  models.Order:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      completed_quantity:
        type: integer
      created_at:
        type: integer
      currency:
        type: string
      deleted_at:
        type: integer
      description:
        type: string
      expect_delivery_date:
        type: integer
      id:
        description: Model
        type: string
      inquiry:
        $ref: '#/definitions/models.Inquiry'
        type: object
      inquiry_buyer:
        $ref: '#/definitions/models.InquiryBuyer'
        type: object
      inquiry_id:
        type: string
      inquiry_seller:
        $ref: '#/definitions/models.InquirySeller'
        type: object
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      milestone:
        type: string
      name:
        type: string
      note_to_supplier:
        type: string
      order_source:
        type: string
      paid_total:
        type: number
      payment_intent_id:
        type: string
      payment_status:
        type: string
      payment_transactions:
        items:
          $ref: '#/definitions/models.PaymentTransaction'
        type: array
      producing_status:
        type: string
      reference_id:
        type: string
      shipping_fee:
        type: number
      shipping_method:
        type: string
      shop_id:
        type: string
      status:
        type: string
      sub_total:
        type: number
      total:
        type: number
      transaction_fee:
        type: number
      updated_at:
        type: integer
      user:
        $ref: '#/definitions/models.User'
        type: object
      user_id:
        type: string
    type: object
  models.OrderCard:
    properties:
      assignees:
        items:
          $ref: '#/definitions/models.User'
        type: array
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      card_type:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      due_date:
        type: integer
      finish_date:
        type: integer
      id:
        type: string
      inquiry_sku_id:
        type: string
      order_id:
        type: string
      product_attributes:
        $ref: '#/definitions/models.OrderCardProductAttributes'
        description: size, color, fabric, composition
        type: object
      start_date:
        type: integer
      status:
        type: string
      status_updated_by_id:
        type: string
      status_updated_by_user:
        $ref: '#/definitions/models.User'
        type: object
      updated_at:
        type: integer
    required:
    - card_type
    - order_id
    type: object
  models.OrderCardProductAttribute:
    properties:
      attribute:
        type: string
      value:
        type: string
    type: object
  models.OrderCardProductAttributes:
    items:
      $ref: '#/definitions/models.OrderCardProductAttribute'
    type: array
  models.OrderCreateForm:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemCreateForm'
        type: array
    required:
    - items
    type: object
  models.OrderDelivery:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      balance_quantity:
        type: integer
      country_code:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      delivery_attributes:
        $ref: '#/definitions/models.DeliveryAttributes'
        type: object
      delivery_date:
        type: integer
      delivery_type:
        type: string
      from_location:
        type: string
      id:
        type: string
      order_id:
        type: string
      plan_date:
        type: integer
      port:
        type: string
      province:
        type: string
      quantity:
        type: integer
      quantity_unit:
        type: string
      status:
        type: string
      to_location:
        type: string
      updated_at:
        type: integer
    type: object
  models.OrderInquiryCreateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      completed_quantity:
        type: integer
      description:
        type: string
      expect_delivery_date:
        type: integer
      inquiry_id:
        type: string
      name:
        type: string
      producing_status:
        type: string
      shop_id:
        type: string
    required:
    - inquiry_id
    - name
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      order_id:
        type: string
      producing_status:
        type: string
      product:
        $ref: '#/definitions/models.Product'
        type: object
      product_id:
        type: string
      quantity:
        type: integer
      shop_id:
        type: string
      updated_at:
        type: integer
      variant:
        $ref: '#/definitions/models.Variant'
        type: object
      variant_id:
        type: string
    type: object
  models.OrderItemUpdateForm:
    properties:
      quantity:
        type: integer
    type: object
  models.OrderItemsCreateForm:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemCreateForm'
        type: array
    required:
    - items
    type: object
  models.OrderItemsRemoveForm:
    properties:
      item_ids:
        items:
          type: string
        type: array
    required:
    - item_ids
    type: object
  models.OrderUpdateForm:
    properties:
      items:
        items:
          $ref: '#/definitions/models.CartItemCreateForm'
        type: array
    required:
    - items
    type: object
  models.Page:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      page_type:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      url:
        type: string
    type: object
  models.PageDetailResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/models.PageSectionResponse'
        type: array
      title:
        type: string
      url:
        type: string
    type: object
  models.PageMetadata:
    items:
      type: object
    type: array
  models.PageSectionCreateForm:
    properties:
      content:
        type: string
      metadata:
        $ref: '#/definitions/models.PageMetadata'
        type: object
      order:
        type: integer
      page_id:
        type: string
      section_type:
        type: string
      title:
        type: string
    type: object
  models.PageSectionResponse:
    properties:
      content:
        type: string
      id:
        type: string
      metadata:
        type: object
      order:
        type: integer
      section_type:
        type: string
      title:
        type: string
    type: object
  models.PageSectionUpdateForm:
    properties:
      content:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/models.PageMetadata'
        type: object
      order:
        type: integer
      section_type:
        type: string
      title:
        type: string
    type: object
  models.PageUpdateForm:
    properties:
      page_type:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  models.PageWithSectionUpdateForm:
    properties:
      content:
        items:
          $ref: '#/definitions/models.PageSectionUpdateForm'
        type: array
      title:
        type: string
      url:
        type: string
    type: object
  models.PaymentTransaction:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      balance_amount:
        type: number
      created_at:
        type: integer
      currency:
        type: string
      deleted_at:
        type: integer
      id:
        type: string
      order_id:
        type: string
      paid_amount:
        type: number
      paid_date:
        type: integer
      payment_completed:
        type: boolean
      payment_method:
        type: string
      reference_id:
        type: string
      remark:
        type: string
      updated_at:
        type: integer
    type: object
  models.Post:
    properties:
      content:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      published_at:
        type: integer
      short_description:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: integer
    type: object
  models.PostUpdateForm:
    properties:
      content:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      published_at:
        type: integer
      short_description:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: integer
    type: object
  models.Product:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      category_id:
        type: string
      created_at:
        type: integer
      daily_deal:
        type: boolean
      deleted_at:
        type: integer
      description:
        type: string
      id:
        type: string
      min_order:
        type: integer
      name:
        type: string
      price:
        type: number
      product_type:
        description: clothing, fabric, graphic....
        type: string
      rating_count:
        type: integer
      rating_star:
        type: number
      ready_to_ship:
        type: boolean
      shop:
        $ref: '#/definitions/models.Shop'
        type: object
      shop_id:
        type: string
      short_description:
        type: string
      sku:
        type: string
      sold_quantity:
        type: integer
      source:
        type: string
      source_product_id:
        type: string
      trade_unit:
        description: piece, pairs, boxes
        type: string
      updated_at:
        type: integer
      variants:
        items:
          $ref: '#/definitions/models.Variant'
        type: array
    type: object
  models.ProductAttributeUpdateForm:
    properties:
      name:
        type: string
      values:
        $ref: '#/definitions/models.ProductValidAttributes'
        type: object
    type: object
  models.ProductCreateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      category_id:
        type: string
      daily_deal:
        type: boolean
      description:
        type: string
      min_order:
        type: integer
      name:
        type: string
      price:
        type: number
      product_attributes:
        items:
          $ref: '#/definitions/models.ProductAttributeUpdateForm'
        type: array
      product_type:
        description: clothing, fabric, graphic....
        type: string
      quantity_price_tiers:
        items:
          $ref: '#/definitions/models.QuantityPriceTierUpdateForm'
        type: array
      rating_count:
        type: integer
      rating_star:
        type: number
      ready_to_ship:
        type: boolean
      shop_id:
        type: string
      short_description:
        type: string
      sku:
        type: string
      trade_unit:
        description: piece, pairs, boxes
        type: string
      variant_attributes:
        items:
          $ref: '#/definitions/models.VariantAttributeUpdateForm'
        type: array
    required:
    - name
    - shop_id
    type: object
  models.ProductFilter:
    properties:
      key:
        type: string
      name:
        type: string
      options:
        type: object
      type:
        type: string
    type: object
  models.ProductResponse:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      description:
        type: string
      id:
        description: Model
        type: string
      name:
        type: string
      price:
        type: number
      product_type:
        type: string
      ready_to_ship:
        type: boolean
      shop:
        $ref: '#/definitions/models.Shop'
        type: object
      shop_id:
        type: string
      short_description:
        type: string
      sku:
        type: string
      sold_quantity:
        type: integer
    type: object
  models.ProductValidAttributes:
    items:
      type: string
    type: array
  models.Promotion:
    properties:
      active:
        type: boolean
      coupon_code:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      expires_at:
        type: integer
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      name:
        type: string
      shop:
        $ref: '#/definitions/models.Shop'
        type: object
      shop_id:
        type: string
      starts_at:
        type: integer
      updated_at:
        type: integer
    type: object
  models.PromotionUpdateForm:
    properties:
      active:
        type: boolean
      coupon_code:
        type: string
      description:
        type: string
      expires_at:
        type: integer
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      name:
        type: string
      shop_id:
        type: string
      starts_at:
        type: integer
    type: object
  models.PurchaseOrder:
    properties:
      collections:
        items:
          $ref: '#/definitions/models.PurchaseOrderCollection'
        type: array
      created_at:
        type: integer
      deleted_at:
        type: integer
      delivery_date:
        type: integer
      id:
        type: string
      reference_id:
        type: string
      shipping_fee:
        type: number
      sub_total:
        type: number
      tax:
        type: number
      total_price:
        type: number
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  models.PurchaseOrderCollection:
    properties:
      collection_id:
        type: string
      created_at:
        type: integer
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.PurchaseOrderItem'
        type: array
      purchase_order_id:
        type: string
      updated_at:
        type: integer
    type: object
  models.PurchaseOrderCollectionCreateForm:
    properties:
      collection_id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.PurchaseOrderItemCreateForm'
        type: array
    required:
    - collection_id
    type: object
  models.PurchaseOrderCreateForm:
    properties:
      collections:
        items:
          $ref: '#/definitions/models.PurchaseOrderCollectionCreateForm'
        type: array
    required:
    - collections
    type: object
  models.PurchaseOrderItem:
    properties:
      color:
        type: string
      created_at:
        type: integer
      id:
        type: string
      purchase_order_collection_id:
        type: string
      purchase_order_id:
        type: string
      qty:
        type: integer
      size:
        type: string
      total_price:
        type: number
      unit_price:
        type: number
      updated_at:
        type: integer
    type: object
  models.PurchaseOrderItemCreateForm:
    properties:
      color:
        type: string
      qty:
        type: integer
      size:
        type: string
      unit_price:
        type: number
    required:
    - color
    - qty
    - size
    - unit_price
    type: object
  models.QcReport:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      created_at:
        type: integer
      deleted_at:
        type: integer
      featured_image:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      inspection_date:
        type: integer
      order_id:
        type: string
      plan_date:
        type: integer
      report_type:
        type: string
      report_user_id:
        type: string
      reporter:
        $ref: '#/definitions/models.User'
        type: object
      result:
        type: string
      updated_at:
        type: integer
    type: object
  models.QuantityPriceTierUpdateForm:
    properties:
      max_quantity:
        type: integer
      min_quantity:
        type: integer
      price:
        type: number
      product_id:
        type: string
      unit:
        type: string
    required:
    - min_quantity
    - price
    - product_id
    - unit
    type: object
  models.Records:
    properties:
      records:
        type: object
    type: object
  models.RegisterForm:
    properties:
      annual_revenue:
        type: number
      avatar:
        $ref: '#/definitions/models.Attachment'
        type: object
      brand_age:
        type: integer
      brand_name:
        type: string
      country_code:
        type: string
      customer_type:
        type: string
      email:
        type: string
      first_name:
        description: Password     string             `json:"password" validate:"required"`
        type: string
      id:
        type: string
      last_name:
        type: string
      monthly_turnover:
        type: number
      name:
        type: string
      phone_number:
        type: string
      register_area:
        type: string
      register_business:
        type: string
      register_product_categories:
        items:
          type: string
        type: array
      register_quantity:
        type: string
      role:
        type: string
      total_pcs_required:
        type: integer
    type: object
  models.ResendVerificationEmailForm:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.ResetPasswordForm:
    properties:
      new_password:
        type: string
      token_reset_password:
        type: string
    required:
    - new_password
    - token_reset_password
    type: object
  models.S3SignatureForm:
    properties:
      content_type:
        type: string
      resource:
        type: string
    required:
    - content_type
    type: object
  models.S3SignatureForms:
    properties:
      records:
        items:
          $ref: '#/definitions/models.S3SignatureForm'
        type: array
    required:
    - records
    type: object
  models.SearchEvent:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      keyword:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    required:
    - keyword
    - user_id
    type: object
  models.SearchSuggestion:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      keyword:
        type: string
      order:
        type: integer
      updated_at:
        type: integer
    required:
    - keyword
    type: object
  models.SearchSuggestionUpdateForm:
    properties:
      keyword:
        type: string
      order:
        type: integer
    required:
    - keyword
    type: object
  models.SellerDashboardResponse:
    properties:
      messages:
        items:
          type: string
        type: array
      news:
        items:
          type: string
        type: array
      recommended_products:
        type: object
    type: object
  models.SellerQuatationPerSkuForm:
    properties:
      currency:
        type: string
      inquiry_sku_id:
        type: string
      price:
        type: number
      price_type:
        type: string
    type: object
  models.SendInquiryToBuyerForm:
    properties:
      attachment:
        $ref: '#/definitions/models.Attachment'
        type: object
      delivery_date:
        description: |-
          Price     price.Price            `gorm:"type:decimal(20,4);default:0.0"  json:"price"`
          PriceType enums.InquiryPriceType `json:"price_type"`
          TaxRate   price.Price            `gorm:"type:decimal(20,4);default:0.0" json:"tax_rate"`
        type: integer
      inquiry_id:
        type: string
      production_lead_time:
        type: integer
      quotations:
        items:
          $ref: '#/definitions/models.BuyerQuotationForm'
        type: array
      user_id:
        type: string
    type: object
  models.ShippingMethod:
    properties:
      active:
        type: boolean
      code:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      id:
        type: string
      name:
        type: string
      shipping_type:
        type: string
      sort_order:
        type: integer
      updated_at:
        type: integer
    type: object
  models.ShippingMethodUpdateForm:
    properties:
      active:
        type: boolean
      code:
        type: string
      description:
        type: string
      name:
        type: string
      shipping_type:
        type: string
      sort_order:
        type: integer
    type: object
  models.Shop:
    properties:
      address_level1:
        type: string
      address_level2:
        type: string
      avatar:
        $ref: '#/definitions/models.Attachment'
        description: Photo
        type: object
      business_form:
        description: Export, Local
        type: string
      capacity:
        $ref: '#/definitions/models.JsonArrayMetaData'
        type: object
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
      category_ids:
        items:
          type: string
        type: array
      certifications:
        items:
          $ref: '#/definitions/models.ShopCertification'
        type: array
      coordinate:
        $ref: '#/definitions/models.Coordinate'
        type: object
      coordinate_id:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      id:
        type: string
      moq:
        type: string
      name:
        type: string
      number_of_labor:
        description: Shop detail
        type: integer
      number_of_product_monthly:
        type: integer
      rating_count:
        type: integer
      rating_star:
        type: number
      shop_attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      shop_documents:
        $ref: '#/definitions/models.Attachments'
        type: object
      specialized_products:
        items:
          type: string
        type: array
      status:
        type: string
      updated_at:
        type: integer
      user:
        $ref: '#/definitions/models.User'
        type: object
      user_id:
        type: string
      verified:
        type: boolean
      verified_at:
        type: integer
    type: object
  models.ShopBadge:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      description:
        type: string
      icon:
        $ref: '#/definitions/models.Attachment'
        type: object
      id:
        type: string
      name:
        type: string
      updated_at:
        type: integer
    type: object
  models.ShopBadgeUpdateForm:
    properties:
      description:
        type: string
      icon:
        $ref: '#/definitions/models.Attachment'
        type: object
      name:
        type: string
    type: object
  models.ShopCertification:
    properties:
      attachment:
        $ref: '#/definitions/models.Attachment'
        description: Attachments   *Attachments `json:"attachments,omitempty"`
        type: object
      certification:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      shop_id:
        type: string
      updated_at:
        type: integer
    type: object
  models.ShopFollower:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      follower_id:
        type: string
      id:
        type: string
      shop_id:
        type: string
      updated_at:
        type: integer
    type: object
  models.ShopUpdateForm:
    properties:
      address_level1:
        type: string
      address_level2:
        type: string
      avatar:
        $ref: '#/definitions/models.Attachment'
        type: object
      business_form:
        description: Export, Local
        type: string
      capacity:
        $ref: '#/definitions/models.JsonArrayMetaData'
        type: object
      category_ids:
        description: Export, Local
        items:
          type: string
        type: array
      certifications:
        items:
          $ref: '#/definitions/models.ShopCertification'
        type: array
      coordinate_id:
        type: string
      description:
        type: string
      moq:
        type: string
      name:
        type: string
      number_of_labor:
        type: integer
      number_of_product_monthly:
        type: integer
      shop_attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      shop_documents:
        $ref: '#/definitions/models.Attachments'
        type: object
      specialized_products:
        type: string
      user_id:
        type: string
    type: object
  models.StatsBuyers:
    properties:
      total_records:
        type: integer
    type: object
  models.StatsProducts:
    properties:
      total_records:
        type: integer
    type: object
  models.StatsSuppliers:
    properties:
      total_records:
        type: integer
    type: object
  models.SubscribeByEmailForm:
    properties:
      email:
        type: string
    type: object
  models.Subscriber:
    properties:
      created_at:
        type: integer
      deleted_at:
        type: integer
      email:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      updated_at:
        type: integer
    type: object
  models.SupportTicket:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      content:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      post_count:
        type: integer
      status:
        type: string
      title:
        type: string
      updated_at:
        type: integer
      user_id:
        type: string
    type: object
  models.SupportTicketUpdateForm:
    properties:
      attachments:
        $ref: '#/definitions/models.Attachments'
        type: object
      content:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  models.SupportedLocation:
    properties:
      country_code:
        type: string
      created_at:
        type: integer
      id:
        type: string
      level1_en:
        type: string
      level1_vi:
        type: string
      level2_en:
        type: string
      level2_vi:
        type: string
      level3_en:
        type: string
      level3_vi:
        type: string
      updated_at:
        type: integer
    type: object
  models.User:
    properties:
      account_status:
        type: string
      account_status_changed_at:
        type: integer
      account_verified:
        type: boolean
      account_verified_at:
        type: integer
      annual_revenue:
        type: number
      avatar:
        $ref: '#/definitions/models.Attachment'
        description: Photo
        type: object
      bio:
        type: string
      brand_age:
        type: integer
      brand_name:
        type: string
      coordinate:
        $ref: '#/definitions/models.Coordinate'
        type: object
      coordinate_id:
        type: string
      country_code:
        type: string
      created_at:
        type: integer
      customer_type:
        type: string
      deleted_at:
        type: integer
      description:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_first_login:
        type: boolean
      is_offline:
        type: boolean
      is_test:
        type: boolean
      last_login:
        type: integer
      last_name:
        type: string
      last_online_at:
        type: integer
      monthly_turnover:
        type: number
      name:
        type: string
      phone_number:
        type: string
      register_by_inquiry:
        type: boolean
      representative:
        type: string
      role:
        description: Common
        type: string
      social_provider:
        type: string
      stripe_customer_id:
        type: string
      tax_id:
        type: string
      timezone:
        type: string
      total_pcs_required:
        type: integer
      updated_at:
        type: integer
    type: object
  models.UserPaymentMethodCreateForm:
    properties:
      is_default:
        type: boolean
      payment_method_id:
        type: string
    required:
    - payment_method_id
    type: object
  models.UserUpdateForm:
    properties:
      account_status:
        type: string
      account_status_changed_at:
        type: integer
      annual_revenue:
        type: number
      avatar:
        $ref: '#/definitions/models.Attachment'
        type: object
      bio:
        type: string
      brand_age:
        type: integer
      brand_name:
        type: string
      coordinate:
        $ref: '#/definitions/location.Coordinate'
        type: object
      country_code:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      monthly_turnover:
        type: number
      name:
        type: string
      phone_number:
        type: string
      representative:
        type: string
      role:
        description: Common
        type: string
      tax_id:
        type: string
      total_pcs_required:
        type: integer
    type: object
  models.Variant:
    properties:
      attribute_1:
        type: string
      attribute_2:
        type: string
      created_at:
        type: integer
      deleted_at:
        type: integer
      id:
        type: string
      price:
        type: number
      product:
        $ref: '#/definitions/models.Product'
        type: object
      product_id:
        type: string
      product_name:
        type: string
      sku:
        type: string
      source_inventory_item_id:
        type: string
      source_location_id:
        type: string
      source_product_id:
        type: string
      source_variant_id:
        type: string
      stock:
        type: integer
      title:
        type: string
      updated_at:
        type: integer
    type: object
  models.VariantAttributeUpdateForm:
    properties:
      attribute1:
        type: string
      attribute2:
        type: string
      price:
        type: integer
      product_id:
        type: string
      product_name:
        type: string
      title:
        type: string
    type: object
  models.VerifyEmailForm:
    properties:
      verification_token:
        description: Email string `json:"email" validate:"required"`
        type: string
    required:
    - verification_token
    type: object
  query.Pagination:
    properties:
      current_page:
        type: integer
      has_next:
        type: boolean
      has_prev:
        type: boolean
      metadata:
        type: object
      next_page:
        type: integer
      offset:
        type: integer
      per_page:
        type: integer
      prev_page:
        type: integer
      records:
        type: object
      total_page:
        type: integer
      total_record:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: thaitanloi365@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: inflow api docs
  version: "1.0"
paths:
  /api/v1/admin/Promotions/{Promotion_id}:
    put:
      consumes:
      - application/json
      description: Update Promotion
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PromotionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Promotion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Promotion
      tags:
      - Admin-Promotion
  /api/v1/admin/Promotions/{Promotion_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete Promotion
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Promotion
      tags:
      - Admin-Promotion
  /api/v1/admin/Promotions/create:
    post:
      consumes:
      - application/json
      description: Create Promotion
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PromotionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Promotion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Promotion
      tags:
      - Admin-Promotion
  /api/v1/admin/Promotions/get:
    get:
      consumes:
      - application/json
      description: Promotion Detail
      parameters:
      - description: PromotionID
        in: query
        name: Promotion_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Promotion Detail
      tags:
      - Admin-Promotion
  /api/v1/admin/categories/{category_id}:
    put:
      consumes:
      - application/json
      description: Update category
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CategoryUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - Admin-Category
  /api/v1/admin/categories/{category_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete category
      parameters:
      - description: ID
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - Admin-Category
  /api/v1/admin/categories/create:
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CategoryUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - Admin-Category
  /api/v1/admin/collections:
    get:
      consumes:
      - application/json
      description: Collection List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Collection'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection List
      tags:
      - Admin-Collection
  /api/v1/admin/collections/{collection_id}:
    put:
      consumes:
      - application/json
      description: Update Collection
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CollectionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Collection'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Collection
      tags:
      - Admin-Collection
  /api/v1/admin/collections/{collection_id}/add_product:
    post:
      consumes:
      - application/json
      description: Collection Add Product
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CollectionProductIDsForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Collection'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection Add Product
      tags:
      - Admin-Collection
  /api/v1/admin/collections/{collection_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete Collection
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Collection
      tags:
      - Admin-Collection
  /api/v1/admin/collections/{collection_id}/delete_product:
    delete:
      consumes:
      - application/json
      description: Collection Delete Product
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CollectionProductIDsForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection Delete Product
      tags:
      - Admin-Collection
  /api/v1/admin/collections/{id}/get_product:
    get:
      consumes:
      - application/json
      description: Collection GetProduct
      parameters:
      - description: CollectionID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection GetProduct
      tags:
      - Admin-Collection
  /api/v1/admin/collections/create:
    post:
      consumes:
      - application/json
      description: Create Collection
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CollectionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Collection'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Collection
      tags:
      - Admin-Collection
  /api/v1/admin/collections/get:
    get:
      consumes:
      - application/json
      description: Collection Detail
      parameters:
      - description: CollectionID
        in: query
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection Detail
      tags:
      - Admin-Collection
  /api/v1/admin/faqs/{faq_id}:
    put:
      consumes:
      - application/json
      description: Update Faq
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.FaqUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Faq'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Faq
      tags:
      - Admin-Faq
  /api/v1/admin/faqs/create:
    post:
      consumes:
      - application/json
      description: Create Faq
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.FaqUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Faq'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Faq
      tags:
      - Admin-Faq
  /api/v1/admin/inquiries:
    get:
      consumes:
      - application/json
      description: Inquiry List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: UserID
        in: query
        name: user_id
        type: string
      - description: Date from
        in: query
        name: date_from
        type: number
      - description: Date to
        in: query
        name: date_to
        type: number
      - description: Order reference
        in: query
        name: order_reference_id
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry List
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}:
    get:
      consumes:
      - application/json
      description: Inquiry Detail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry Detail
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/clone:
    put:
      consumes:
      - application/json
      description: Inquiry list for create order
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry list for create order
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/create_shop:
    post:
      consumes:
      - application/json
      description: Admin inquiry create shop
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin inquiry create shop
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/find_shops:
    get:
      consumes:
      - application/json
      description: Admin paginate matching shops
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin paginate matching shops
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/logs:
    get:
      consumes:
      - application/json
      description: Inquiry list for create order
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry list for create order
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/mark_seen:
    put:
      consumes:
      - application/json
      description: Inquiry list for create order
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry list for create order
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/matching_shops:
    get:
      consumes:
      - application/json
      description: Admin paginate matching shops
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin paginate matching shops
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/requests:
    get:
      consumes:
      - application/json
      description: Admin paginate inquiry quotation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin paginate inquiry quotation
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/requests/{inquiry_request_id}/approve:
    post:
      consumes:
      - application/json
      description: Admin approve inquiry request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin approve inquiry request
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/requests/{inquiry_request_id}/reject:
    delete:
      consumes:
      - application/json
      description: Admin reject inquiry request
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin reject inquiry request
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/send:
    post:
      consumes:
      - application/json
      description: Admin send inquiry to seller
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin send inquiry to seller
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/{inquiry_id}/send_to_buyer:
    post:
      consumes:
      - application/json
      description: Admin send quotation to buyer
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SendInquiryToBuyerForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin send quotation to buyer
      tags:
      - Admin-Inquiry
  /api/v1/admin/inquiries/for_creating_order:
    get:
      consumes:
      - application/json
      description: Inquiry list for create order
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry list for create order
      tags:
      - Admin-Inquiry
  /api/v1/admin/inventories:
    get:
      consumes:
      - application/json
      description: Get inventories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get inventories
      tags:
      - Admin-Inventories
  /api/v1/admin/inventories/restock:
    post:
      consumes:
      - application/json
      description: GetCategoryTree
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: GetCategoryTree
      tags:
      - Admin-Inventory
  /api/v1/admin/labels:
    get:
      consumes:
      - application/json
      description: Label List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Date from
        in: query
        name: date_from
        type: number
      - description: Date to
        in: query
        name: date_to
        type: number
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Label'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Label List
      tags:
      - Admin-Label
  /api/v1/admin/labels/{label_id}:
    get:
      consumes:
      - application/json
      description: Label Detail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Label'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Label Detail
      tags:
      - Admin-Label
    put:
      consumes:
      - application/json
      description: Label update
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Label'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Label update
      tags:
      - Admin-Label
  /api/v1/admin/labels/{label_id}/audits:
    get:
      consumes:
      - application/json
      description: Paginate label audits
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Label'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate label audits
      tags:
      - Admin-Label
  /api/v1/admin/labels/create:
    post:
      consumes:
      - application/json
      description: Admin create label
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.LabelCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Label'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin create label
      tags:
      - Admin-Label
  /api/v1/admin/me:
    get:
      consumes:
      - application/json
      description: Get me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - Me
    put:
      consumes:
      - application/json
      description: Update me
      parameters:
      - description: User Update Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update me
      tags:
      - Me
  /api/v1/admin/me/logout:
    delete:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Me
  /api/v1/admin/me/track_activity:
    post:
      consumes:
      - application/json
      description: Track login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Track login
      tags:
      - Me
  /api/v1/admin/notifications:
    get:
      consumes:
      - application/json
      description: Paginate notification
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.CmsNotification'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate notification
      tags:
      - Admin-Notification
  /api/v1/admin/notifications/{notification_id}/mark_seen:
    put:
      consumes:
      - application/json
      description: Paginate notification
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.CmsNotification'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate notification
      tags:
      - Admin-Notification
  /api/v1/admin/notifications/mark_seen_all:
    put:
      consumes:
      - application/json
      description: Paginate notification
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.CmsNotification'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate notification
      tags:
      - Admin-Notification
  /api/v1/admin/orders:
    get:
      consumes:
      - application/json
      description: Paginate orders
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Filter status
        in: query
        name: filter_status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate orders
      tags:
      - Admin-Order
  /api/v1/admin/orders/{id}:
    get:
      consumes:
      - application/json
      description: Order Detail
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order Detail
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}:
    put:
      consumes:
      - application/json
      description: Order update
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order update
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards:
    put:
      consumes:
      - application/json
      description: List Order cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: List Order cards
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards/{order_card_id}:
    put:
      consumes:
      - application/json
      description: Order card detail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order card detail
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards/{order_card_id}/add_comment:
    post:
      consumes:
      - application/json
      description: add order card comment
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ContentCommentCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: add order card comment
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards/{order_card_id}/comments:
    get:
      consumes:
      - application/json
      description: Order card comment pagination
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ContentCommentCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order card comment pagination
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards/{order_card_id}/update_assignee:
    post:
      consumes:
      - application/json
      description: add order update assignee
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ContentCommentCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: add order update assignee
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards/detail:
    get:
      consumes:
      - application/json
      description: Order card detail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order card detail
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/cards/search_assignees:
    get:
      consumes:
      - application/json
      description: Order card search assignees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order card search assignees
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/deliveries:
    get:
      consumes:
      - application/json
      description: Order delivery list
      parameters:
      - description: Delivery type
        in: query
        name: delivery_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderDelivery'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order delivery list
      tags:
      - Admin-Order
    post:
      consumes:
      - application/json
      description: Order delivery list
      parameters:
      - description: Delivery type
        in: query
        name: delivery_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderDelivery'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order delivery list
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/deliveries/{report_id}:
    put:
      consumes:
      - application/json
      description: Order delivery list
      parameters:
      - description: Delivery type
        in: query
        name: delivery_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderDelivery'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order delivery list
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/payment_transactions:
    get:
      consumes:
      - application/json
      description: Order payment transaction list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PaymentTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order payment transaction list
      tags:
      - Seller-Order
    post:
      consumes:
      - application/json
      description: Order payment transaction list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PaymentTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order payment transaction list
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/qc_reports:
    get:
      consumes:
      - application/json
      description: Order qc report list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.QcReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order qc report list
      tags:
      - Admin-Order
    post:
      consumes:
      - application/json
      description: Order qc report create
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.QcReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order qc report create
      tags:
      - Admin-Order
  /api/v1/admin/orders/{order_id}/qc_reports/{report_id}:
    put:
      consumes:
      - application/json
      description: Order qc report update
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.QcReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order qc report update
      tags:
      - Admin-Order
  /api/v1/admin/orders/create:
    post:
      consumes:
      - application/json
      description: Admin create order inquiry
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OrderInquiryCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin create order inquiry
      tags:
      - Admin-order
  /api/v1/admin/orders/exports:
    post:
      consumes:
      - application/json
      description: Get order status count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order status count
      tags:
      - Admin-Order
  /api/v1/admin/orders/payment_transactions:
    get:
      consumes:
      - application/json
      description: Order payment transaction list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PaymentTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order payment transaction list
      tags:
      - Admin-Order
  /api/v1/admin/orders/status_count:
    get:
      consumes:
      - application/json
      description: Get order status count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order status count
      tags:
      - Admin-Order
  /api/v1/admin/pages:
    get:
      consumes:
      - application/json
      description: Page List
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Page List
      tags:
      - Admin-Page
  /api/v1/admin/pages/{page_id}:
    put:
      consumes:
      - application/json
      description: Update Page
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PageWithSectionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Page
      tags:
      - Admin-Page
  /api/v1/admin/pages/{page_id}/add_section:
    post:
      consumes:
      - application/json
      description: Add PageSection
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PageSectionCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Add PageSection
      tags:
      - Admin-Page
  /api/v1/admin/pages/{page_id}/get:
    get:
      consumes:
      - application/json
      description: Page List
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Page List
      tags:
      - Admin-Page
  /api/v1/admin/pages/create:
    post:
      consumes:
      - application/json
      description: Create Page
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PageUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Page
      tags:
      - Admin-Page
  /api/v1/admin/pages/sections/{section_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete PageSection
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PageSectionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete PageSection
      tags:
      - Admin-Page
  /api/v1/admin/pages/sections/{section_id}/update:
    put:
      consumes:
      - application/json
      description: Add PageSection
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PageSectionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Page'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Add PageSection
      tags:
      - Admin-Page
  /api/v1/admin/posts:
    get:
      consumes:
      - application/json
      description: Post List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Post number
        in: query
        name: Post
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Post List
      tags:
      - Admin-Post
  /api/v1/admin/posts/{post_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete Post
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Post
      tags:
      - Admin-Post
  /api/v1/admin/posts/{post_id}/update:
    put:
      consumes:
      - application/json
      description: Update Post
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PostUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Post
      tags:
      - Admin-Post
  /api/v1/admin/posts/create:
    post:
      consumes:
      - application/json
      description: Create Post
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PostUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create Post
      tags:
      - Admin-Post
  /api/v1/admin/posts/get:
    get:
      consumes:
      - application/json
      description: PostDetail
      parameters:
      - description: PostID
        in: query
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: PostDetail
      tags:
      - Admin-Post
  /api/v1/admin/products:
    get:
      consumes:
      - application/json
      description: Product List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: string
      - description: Shop IDs
        in: query
        name: shop_ids
        type: array
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product List
      tags:
      - Admin-Product
  /api/v1/admin/products/{product_id}:
    put:
      consumes:
      - application/json
      description: Update Product
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Product
      tags:
      - Admin-Product
  /api/v1/admin/products/{product_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete Product
      parameters:
      - description: ID
        in: path
        name: Product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Product
      tags:
      - Admin-Product
  /api/v1/admin/products/create:
    post:
      consumes:
      - application/json
      description: create product
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create product
      tags:
      - Admin-Product
  /api/v1/admin/products/get:
    get:
      consumes:
      - application/json
      description: Product Detail
      parameters:
      - description: ProductID
        in: query
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product Detail
      tags:
      - Admin-Product
  /api/v1/admin/promotions:
    get:
      consumes:
      - application/json
      description: Promotion List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Promotion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Promotion List
      tags:
      - Admin-Promotion
  /api/v1/admin/search/search_suggestion:
    get:
      consumes:
      - application/json
      description: Admin List SearchSuggestion
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SearchSuggestion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin List SearchSuggestion
      tags:
      - Admin-Search
  /api/v1/admin/search/search_suggestion/{id}/archive:
    delete:
      consumes:
      - application/json
      description: Delete Search Suggestion
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Search Suggestion
      tags:
      - Admin-Search
  /api/v1/admin/search/search_suggestion/{id}/update:
    put:
      consumes:
      - application/json
      description: Search Update Search Suggestion
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SearchSuggestionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SearchSuggestion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Update Search Suggestion
      tags:
      - Admin-Search
  /api/v1/admin/search/search_suggestion/create:
    post:
      consumes:
      - application/json
      description: Create SearchSuggestion
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SearchSuggestionUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SearchSuggestion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create SearchSuggestion
      tags:
      - Admin-Search
  /api/v1/admin/shipping_methods:
    get:
      consumes:
      - application/json
      description: List ShippingMethod
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShippingMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: List ShippingMethod
      tags:
      - Admin-ShippingMethod
  /api/v1/admin/shipping_methods/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete ShippingMethod
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete ShippingMethod
      tags:
      - Admin-ShippingMethod
  /api/v1/admin/shipping_methods/{shipping_method_id}/update:
    put:
      consumes:
      - application/json
      description: Update ShippingMethod
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShippingMethodUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShippingMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update ShippingMethod
      tags:
      - Admin-ShippingMethod
  /api/v1/admin/shipping_methods/create:
    post:
      consumes:
      - application/json
      description: Create ShippingMethod
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShippingMethodUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShippingMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create ShippingMethod
      tags:
      - Admin-ShippingMethod
  /api/v1/admin/shop_badge/create:
    post:
      consumes:
      - application/json
      description: Create ShopBadge
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopBadgeUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShopBadge'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create ShopBadge
      tags:
      - Admin-ShopBadge
  /api/v1/admin/shop_badges:
    get:
      consumes:
      - application/json
      description: Admin Shop ShopBadgeList
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SearchSuggestion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin Shop ShopBadgeList
      tags:
      - Admin-Shop
  /api/v1/admin/shop_badges/{id}:
    put:
      consumes:
      - application/json
      description: Update ShopBadge
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopBadgeUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShopBadge'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update ShopBadge
      tags:
      - Admin-ShopBadge
  /api/v1/admin/shop_badges/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete ShopBadge
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete ShopBadge
      tags:
      - Admin-Shop
  /api/v1/admin/shops:
    get:
      consumes:
      - application/json
      description: Shop List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: UserID
        in: query
        name: user_id
        type: string
      - description: Statuses
        in: query
        name: statues
        type: array
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop List
      tags:
      - Admin-Shop
  /api/v1/admin/shops/{id}/update_page_section:
    put:
      consumes:
      - application/json
      description: Shop UpdatePageSection
      parameters:
      - description: ShopID
        in: query
        name: shop_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop UpdatePageSection
      tags:
      - Admin-Shop
  /api/v1/admin/shops/{shop_id}:
    put:
      consumes:
      - application/json
      description: Update Shop
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Shop
      tags:
      - Admin-Shop
  /api/v1/admin/shops/create:
    post:
      consumes:
      - application/json
      description: Create shop
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create shop
      tags:
      - Admin-Shop
  /api/v1/admin/shops/get:
    get:
      consumes:
      - application/json
      description: ShopDetail
      parameters:
      - description: ShopID
        in: query
        name: shop_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: ShopDetail
      tags:
      - Admin-Shop
  /api/v1/admin/stats/buyers:
    get:
      consumes:
      - application/json
      description: Stats buyers
      parameters:
      - description: From
        in: query
        name: from_time
        type: integer
      - description: To
        in: query
        name: to_time
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.StatsBuyers'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Stats buyers
      tags:
      - Admin-Stats
  /api/v1/admin/stats/products:
    get:
      consumes:
      - application/json
      description: Stats products
      parameters:
      - description: From
        in: query
        name: from_time
        type: integer
      - description: To
        in: query
        name: to_time
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.StatsProducts'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Stats products
      tags:
      - Admin-Stats
  /api/v1/admin/stats/suppliers:
    get:
      consumes:
      - application/json
      description: Stats suppliers
      parameters:
      - description: From
        in: query
        name: from_time
        type: integer
      - description: To
        in: query
        name: to_time
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.StatsSuppliers'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Stats suppliers
      tags:
      - Admin-Stats
  /api/v1/admin/subscribers/{subscriber_id}:
    put:
      consumes:
      - application/json
      description: Update Subscriber
      parameters:
      - description: ID
        in: path
        name: Subscriber_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SubscribeByEmailForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Subscriber'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Subscriber
      tags:
      - Admin-Subscriber
  /api/v1/admin/subscribers/{subscriber_id}/archive:
    delete:
      consumes:
      - application/json
      description: Archive Subscriber
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Archive Subscriber
      tags:
      - Admin-Subscriber
  /api/v1/admin/subscribers/search:
    get:
      consumes:
      - application/json
      description: Search subscribers
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            items:
              $ref: '#/definitions/models.Subscriber'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search subscribers
      tags:
      - Admin-Subscribers
  /api/v1/admin/task/dispatch:
    post:
      consumes:
      - application/json
      description: Dispatch task
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Dispatch task
      tags:
      - Admin-Task
  /api/v1/admin/users:
    get:
      consumes:
      - application/json
      description: Get users
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: '"last_login desc"'
        description: Sort
        enum:
        - '"last_login desc"'
        - '"last_login asc"'
        in: query
        items:
          type: string
        name: sorts
        type: array
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - Admin-User
  /api/v1/admin/users/{user_id}:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: ID of user
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - Admin-User
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - Admin-User
  /api/v1/admin/users/{user_id}/active:
    post:
      consumes:
      - application/json
      description: Active user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Active user
      tags:
      - Admin-User
  /api/v1/admin/users/{user_id}/approve:
    post:
      consumes:
      - application/json
      description: Approve user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Approve user
      tags:
      - Admin-User
  /api/v1/admin/users/{user_id}/archive:
    delete:
      consumes:
      - application/json
      description: Unarchive user
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Unarchive user
      tags:
      - Admin-User
  /api/v1/admin/users/{user_id}/deactive:
    delete:
      consumes:
      - application/json
      description: Deactive user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Deactive user
      tags:
      - Admin-User
  /api/v1/admin/users/{user_id}/reject:
    delete:
      consumes:
      - application/json
      description: Reject user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Reject user
      tags:
      - Admin-User
  /api/v1/admin/users/create:
    post:
      consumes:
      - application/json
      description: Admin CreateUser
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.RegisterForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Admin CreateUser
      tags:
      - Admin-User
  /api/v1/admin/users/recent:
    get:
      consumes:
      - application/json
      description: Get recent users created
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: '"last_login desc"'
        description: Sort
        enum:
        - '"last_login desc"'
        - '"last_login asc"'
        in: query
        items:
          type: string
        name: sorts
        type: array
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get recent users created
      tags:
      - Admin-User
  /api/v1/admin/users/search:
    get:
      consumes:
      - application/json
      description: Search users
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search users
      tags:
      - Admin-User
  /api/v1/admins/categories/get_category_tree:
    get:
      consumes:
      - application/json
      description: GetCategoryTree
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: GetCategoryTree
      tags:
      - Admin-Category
  /api/v1/carts:
    get:
      consumes:
      - application/json
      description: Paginate carts
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Cart'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate carts
      tags:
      - Marketplace-Cart
  /api/v1/carts/{id}:
    get:
      consumes:
      - application/json
      description: Get cart
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get cart
      tags:
      - Marketplace-Cart
    put:
      consumes:
      - application/json
      description: Update cart
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CartUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.FactoryTour'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update cart
      tags:
      - Marketplace-Cart
  /api/v1/carts/{id}/items:
    delete:
      consumes:
      - application/json
      description: Remove cart items
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CartItemsRemoveForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.FactoryTour'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Remove cart items
      tags:
      - Marketplace-Cart
    get:
      consumes:
      - application/json
      description: Get cart items
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CartUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.FactoryTour'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get cart items
      tags:
      - Marketplace-Cart
    post:
      consumes:
      - application/json
      description: Add cart items
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CartItemsCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.FactoryTour'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Add cart items
      tags:
      - Marketplace-Cart
  /api/v1/carts/{id}/items/{item_id}:
    get:
      consumes:
      - application/json
      description: Get cart
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get cart
      tags:
      - Marketplace-Cart
    put:
      consumes:
      - application/json
      description: Update cart
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CartItemUpdateForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update cart
      tags:
      - Marketplace-Cart
  /api/v1/carts/create:
    post:
      consumes:
      - application/json
      description: create cart
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CartCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create cart
      tags:
      - Marketplace-Cart
  /api/v1/chat_messages:
    get:
      consumes:
      - application/json
      description: Paginate messages
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate messages
      tags:
      - Chat-Message
    post:
      consumes:
      - application/json
      description: Create chat message
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ChatMessageCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create chat message
      tags:
      - Chat-Message
  /api/v1/chat_messages/{id}:
    get:
      consumes:
      - application/json
      description: Get chat message
      parameters:
      - description: ID of chat message
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get chat message
      tags:
      - Chat-Message
    put:
      consumes:
      - application/json
      description: Update chat message
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ChatMessageUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update chat message
      tags:
      - Chat-Message
  /api/v1/chat_messages/{id}/archive:
    delete:
      consumes:
      - application/json
      description: Delete chat message
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete chat message
      tags:
      - Chat-Message
  /api/v1/chat_messages/seen:
    post:
      consumes:
      - application/json
      description: Seen chat messages
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ChatMessageSeenForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Seen chat messages
      tags:
      - Chat-Message
  /api/v1/chat_rooms:
    get:
      consumes:
      - application/json
      description: Paginate messages
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate messages
      tags:
      - Chat-Message
    post:
      consumes:
      - application/json
      description: Create chat room
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ChatRoomCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatRoom'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create chat room
      tags:
      - Chat-Message
  /api/v1/chat_rooms/{id}:
    get:
      consumes:
      - application/json
      description: Get chat room
      parameters:
      - description: ID of chat room
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatRoom'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get chat room
      tags:
      - Chat-Message
    put:
      consumes:
      - application/json
      description: Update chat room
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ChatRoomUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatRoom'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update chat room
      tags:
      - Chat-Message
  /api/v1/chat_rooms/{id}/archive:
    delete:
      consumes:
      - application/json
      description: Delete chat room
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ChatRoom'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete chat room
      tags:
      - Chat-Message
  /api/v1/checkout/create:
    post:
      consumes:
      - application/json
      description: create checkout
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CheckoutCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create checkout
      tags:
      - Marketplace-Checkout
  /api/v1/client/me:
    get:
      consumes:
      - application/json
      description: Get me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - Client-Me
    put:
      consumes:
      - application/json
      description: Update me
      parameters:
      - description: User Update Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update me
      tags:
      - Client-Me
  /api/v1/client/me/logout:
    delete:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Client-Me
  /api/v1/client/me/track_activity:
    post:
      consumes:
      - application/json
      description: Track login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Track login
      tags:
      - Client-Me
  /api/v1/client/me/update_password:
    put:
      consumes:
      - application/json
      description: Update password
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Update password
      tags:
      - Client-Me
  /api/v1/collections/{id}/get_product:
    get:
      consumes:
      - application/json
      description: Collection GetProduct
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection GetProduct
      tags:
      - Marketplace-Collection
  /api/v1/collections/get:
    get:
      consumes:
      - application/json
      description: Collection Detail
      parameters:
      - description: CollectionID
        in: query
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Collection'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection Detail
      tags:
      - Marketplace-Collection
  /api/v1/collections/pre_design:
    get:
      consumes:
      - application/json
      description: Collection PreDesign
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Collection'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Collection PreDesign
      tags:
      - Marketplace-Collection
  /api/v1/common/check_exists:
    post:
      consumes:
      - application/json
      description: Check exists
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CheckExistsForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Check exists
      tags:
      - Common
  /api/v1/common/constants:
    get:
      consumes:
      - application/json
      description: Generate constants
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Generate constants
      tags:
      - Common
  /api/v1/common/register_constants:
    get:
      consumes:
      - application/json
      description: Generate register constants
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Generate register constants
      tags:
      - Common
  /api/v1/common/s3_signature:
    post:
      consumes:
      - application/json
      description: Generate s3 signatures
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.S3SignatureForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Generate s3 signatures
      tags:
      - Common
  /api/v1/common/s3_signatures:
    post:
      consumes:
      - application/json
      description: Generate s3 signatures
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.S3SignatureForms'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Generate s3 signatures
      tags:
      - Common
  /api/v1/common/search_addresses:
    get:
      consumes:
      - application/json
      description: Search addresses
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search addresses
      tags:
      - Common
  /api/v1/common/subscribe_email:
    post:
      consumes:
      - application/json
      description: User SubscribeByEmail
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SubscribeByEmailForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: User SubscribeByEmail
      tags:
      - Common
  /api/v1/common/supported_locations:
    get:
      consumes:
      - application/json
      description: Get Supported Locations
      parameters:
      - description: Country Code
        in: query
        name: country_code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            items:
              $ref: '#/definitions/models.SupportedLocation'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Supported Locations
      tags:
      - Common-Supported Locations
  /api/v1/common/supported_ports:
    get:
      consumes:
      - application/json
      description: Get Supported Ports
      parameters:
      - description: Country Code
        in: query
        name: country_code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            items:
              $ref: '#/definitions/models.SupportedLocation'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Supported Ports
      tags:
      - Common-Supported Ports
  /api/v1/faqs/search:
    get:
      consumes:
      - application/json
      description: Search Faq
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Faq type
        enum:
        - seller
        - buyer
        in: query
        name: faq_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Faq'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Faq
      tags:
      - Marketplace-Faq
  /api/v1/forgot_password:
    post:
      consumes:
      - application/json
      description: Forgot password
      parameters:
      - description: Login Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ForgotPasswordResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Forgot password
      tags:
      - Auth
  /api/v1/inquiries:
    get:
      consumes:
      - application/json
      description: Inquiry List
      parameters:
      - description: Quotation status
        in: query
        name: quotation_status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Date from
        in: query
        name: date_from
        type: integer
      - description: Date to
        in: query
        name: date_to
        type: integer
      - description: Order reference
        in: query
        name: order_reference_id
        type: string
      - description: Inquiry Quotation Status filter
        in: query
        name: statuses
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry List
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/{inquiry_id}:
    get:
      consumes:
      - application/json
      description: Get an inquiry
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get an inquiry
      tags:
      - Marketplace-Inquiry
    put:
      consumes:
      - application/json
      description: update inquiry
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.InquiryUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: update inquiry
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/{inquiry_id}/add_sku:
    post:
      consumes:
      - application/json
      description: Inquiry add sku
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry add sku
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/{inquiry_id}/approve_quotation:
    post:
      consumes:
      - application/json
      description: Approve inquiry quotation
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.BuyerApproveInquiryQuotationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Approve inquiry quotation
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/{inquiry_id}/clone:
    post:
      consumes:
      - application/json
      description: Clone an inquiry
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Clone an inquiry
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/{inquiry_id}/reject_quotation:
    post:
      consumes:
      - application/json
      description: Reject inquiry quotation
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.BuyerRejectInquiryQuotationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Reject inquiry quotation
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/{inquiry_id}/skus/{inquiry_sku_id}:
    put:
      consumes:
      - application/json
      description: Inquiry update sku
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry update sku
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/create:
    post:
      consumes:
      - application/json
      description: create inquiry
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.InquiryCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Cart'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create inquiry
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiries/create_without_login:
    post:
      consumes:
      - application/json
      description: create inquiry
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.InquiryCreateWithoutLoginForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Inquiry'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create inquiry
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiry_skus/{inquiry_sku_id}/add_comment:
    post:
      consumes:
      - application/json
      description: create inquiry sku comment
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ContentCommentCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create inquiry sku comment
      tags:
      - Marketplace-Inquiry
  /api/v1/inquiry_skus/{inquiry_sku_id}/comments:
    get:
      consumes:
      - application/json
      description: Inquiry sku comments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquiry sku comments
      tags:
      - Marketplace-Inquiry
  /api/v1/login_email:
    post:
      consumes:
      - application/json
      description: Login by email
      parameters:
      - description: Login Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.LoginEmailForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Login by email
      tags:
      - Auth
  /api/v1/me:
    put:
      consumes:
      - application/json
      description: Update me
      parameters:
      - description: User Update Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update me
      tags:
      - Marketplace-Me
  /api/v1/oauth/google:
    get:
      consumes:
      - application/json
      description: Google login
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Google login
      tags:
      - Auth
  /api/v1/oauth/google/callback:
    get:
      consumes:
      - application/json
      description: Google callback
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Google callback
      tags:
      - Auth
  /api/v1/oauth/shopify/callback:
    get:
      consumes:
      - application/json
      description: Shopify oauth callback
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Shopify oauth callback
      tags:
      - Auth
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Paginate orders
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Date from
        in: query
        name: date_from
        type: integer
      - description: Date to
        in: query
        name: date_to
        type: integer
      - description: Order reference
        in: query
        name: reference_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate orders
      tags:
      - Marketplace-Order
  /api/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get order
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order
      tags:
      - Marketplace-Order
    put:
      consumes:
      - application/json
      description: Update order
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OrderUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update order
      tags:
      - Marketplace-Order
  /api/v1/orders/{id}/items:
    delete:
      consumes:
      - application/json
      description: Remove order items
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OrderItemsRemoveForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Remove order items
      tags:
      - Marketplace-Order
    get:
      consumes:
      - application/json
      description: Get order items
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/models.Records'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.OrderItem'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order items
      tags:
      - Marketplace-Order
    post:
      consumes:
      - application/json
      description: Add order items
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OrderItemsCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/models.Records'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.OrderItem'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Add order items
      tags:
      - Marketplace-Order
  /api/v1/orders/{id}/items/{item_id}:
    get:
      consumes:
      - application/json
      description: Get order
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order
      tags:
      - Marketplace-Order
    put:
      consumes:
      - application/json
      description: Update order
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OrderItemUpdateForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update order
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/cards:
    get:
      consumes:
      - application/json
      description: Get order producing status count
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order producing status count
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/cards/:order_card_id/approve:
    put:
      consumes:
      - application/json
      description: Approve card
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Approve card
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/cards/:order_card_id/reject:
    put:
      consumes:
      - application/json
      description: Approve card
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Approve card
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/cards/detail:
    get:
      consumes:
      - application/json
      description: Get order card detail
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order card detail
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/deliveries:
    get:
      consumes:
      - application/json
      description: Order delivery list
      parameters:
      - description: Delivery type
        in: query
        name: delivery_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderDelivery'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order delivery list
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/payment_transactions:
    get:
      consumes:
      - application/json
      description: Order payment transaction list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PaymentTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order payment transaction list
      tags:
      - Marketplace-Order
  /api/v1/orders/{order_id}/qc_reports:
    get:
      consumes:
      - application/json
      description: Order qc report list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.QcReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order qc report list
      tags:
      - Marketplace-Order
  /api/v1/orders/create:
    post:
      consumes:
      - application/json
      description: create order
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.OrderCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create order
      tags:
      - Marketplace-Order
  /api/v1/orders/producing_status_count:
    get:
      consumes:
      - application/json
      description: Get order producing status count
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order producing status count
      tags:
      - Marketplace-Order
  /api/v1/orders/status_count:
    get:
      consumes:
      - application/json
      description: Get order status count
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order status count
      tags:
      - Marketplace-Order
  /api/v1/pages/catalog:
    get:
      consumes:
      - application/json
      description: PageCatalog
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PageDetailResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: PageCatalog
      tags:
      - Marketplace-Page
  /api/v1/pages/home:
    get:
      consumes:
      - application/json
      description: PageHome
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PageDetailResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: PageHome
      tags:
      - Marketplace-Page
  /api/v1/posts/search:
    get:
      consumes:
      - application/json
      description: Search Post
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Post
      tags:
      - Marketplace-Post
  /api/v1/products/add_rating:
    post:
      consumes:
      - application/json
      description: Product AddRating
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product AddRating
      tags:
      - Marketplace-Product
  /api/v1/products/best_selling:
    get:
      consumes:
      - application/json
      description: Product Get BestSelling
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product Get BestSelling
      tags:
      - Marketplace-Product
  /api/v1/products/get:
    get:
      consumes:
      - application/json
      description: Search Product
      parameters:
      - description: ProductID
        in: query
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product Detail
      tags:
      - Marketplace-Product
  /api/v1/products/get_category_tree:
    get:
      consumes:
      - application/json
      description: GetCategoryTree
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: GetCategoryTree
      tags:
      - Marketplace-Product
  /api/v1/products/get_filter:
    get:
      consumes:
      - application/json
      description: Product GetFilter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ProductFilter'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product GetFilter
      tags:
      - Marketplace-Product
  /api/v1/products/get_ratings:
    get:
      consumes:
      - application/json
      description: Product GetRating
      parameters:
      - description: ProductID
        in: query
        name: product_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product GetRating
      tags:
      - Marketplace-Product
  /api/v1/products/just_for_you:
    get:
      consumes:
      - application/json
      description: Product Get GetJustForYou
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product GetJustForYou
      tags:
      - Marketplace-Product
  /api/v1/products/ready_to_ship:
    get:
      consumes:
      - application/json
      description: Product ReadyToShip
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product ReadyToShip
      tags:
      - Marketplace-Product
  /api/v1/products/recommendations:
    get:
      consumes:
      - application/json
      description: Product Get GetJustForYou
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product GetJustForYou
      tags:
      - Marketplace-Product
  /api/v1/products/search:
    get:
      consumes:
      - application/json
      description: Search Product
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: string
      - description: Rating start
        in: query
        name: rating_star
        type: integer
      - description: Min order
        in: query
        name: min_order
        type: integer
      - description: Product type
        in: query
        name: product_type
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Product
      tags:
      - Marketplace-Product
  /api/v1/products/today_deals:
    get:
      consumes:
      - application/json
      description: Product TodayDeals
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product TodayDeals
      tags:
      - Marketplace-Product
  /api/v1/purchase_orders:
    get:
      consumes:
      - application/json
      description: Purchase orders
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.PurchaseOrder'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Purchase orders
      tags:
      - Marketplace-PO
    post:
      consumes:
      - application/json
      description: Search Product
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.PurchaseOrderCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PurchaseOrder'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product Detail
      tags:
      - Marketplace-PO
  /api/v1/purchase_orders/{purchase_order_id}:
    get:
      consumes:
      - application/json
      description: Get purchase order
      parameters:
      - description: ID
        in: query
        name: purchase_order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PurchaseOrder'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get purchase order
      tags:
      - Marketplace-PO
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.RegisterForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Register
      tags:
      - Auth
  /api/v1/resend_verification_email:
    post:
      consumes:
      - application/json
      description: Resend Verification Email
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ResendVerificationEmailForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Resend Verification Email
      tags:
      - Auth
  /api/v1/reset_password:
    post:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Reset password
      tags:
      - Auth
  /api/v1/search/search_hint:
    get:
      consumes:
      - application/json
      description: Search Hint
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SearchEvent'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Hint
      tags:
      - Marketplace-Search
  /api/v1/search/search_suggestion:
    get:
      consumes:
      - application/json
      description: Search Suggestion
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Suggestion
      tags:
      - Marketplace-Search
  /api/v1/seller/dashboard:
    get:
      consumes:
      - application/json
      description: Get general info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SellerDashboardResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get general info
      tags:
      - Seller-Dashboard
  /api/v1/seller/dashboard/revenue:
    get:
      consumes:
      - application/json
      description: Get revenue
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get revenue
      tags:
      - Seller-Dashboard
  /api/v1/seller/inquiries/{id}/audits:
    get:
      consumes:
      - application/json
      description: Inquriry list
      parameters:
      - description: Date from
        in: query
        name: date_from
        type: number
      - description: Date to
        in: query
        name: date_to
        type: number
      - description: Inquiry Statuses
        in: query
        name: inquiry_statuses
        type: array
      - description: Seller Quotation filter
        in: query
        name: seller_quotation_filter
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Date from
        in: query
        name: date_from
        type: integer
      - description: Date to
        in: query
        name: date_to
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Inquiry'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquriry list
      tags:
      - Seller-Inquiry
  /api/v1/seller/inquiries/{id}/latest_audit:
    get:
      consumes:
      - application/json
      description: Inquriry list
      parameters:
      - description: Date from
        in: query
        name: date_from
        type: number
      - description: Date to
        in: query
        name: date_to
        type: number
      - description: Inquiry Statuses
        in: query
        name: inquiry_statuses
        type: array
      - description: Seller Quotation filter
        in: query
        name: seller_quotation_filter
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Date from
        in: query
        name: date_from
        type: integer
      - description: Date to
        in: query
        name: date_to
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Inquiry'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquriry list
      tags:
      - Seller-Inquiry
  /api/v1/seller/inquiries/quotations:
    get:
      consumes:
      - application/json
      description: Inquriry list
      parameters:
      - description: Date from
        in: query
        name: date_from
        type: number
      - description: Date to
        in: query
        name: date_to
        type: number
      - description: Inquiry Statuses
        in: query
        name: inquiry_statuses
        type: array
      - description: Seller Quotation filter
        in: query
        name: seller_quotation_filter
        type: string
      - description: Quotation Status filter
        in: query
        name: statuses
        type: array
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Date from
        in: query
        name: date_from
        type: integer
      - description: Date to
        in: query
        name: date_to
        type: integer
      - description: Order reference
        in: query
        name: order_reference_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Inquiry'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquriry list
      tags:
      - Seller-Inquiry
  /api/v1/seller/inquiries/quotations/{inquiry_seller_id}:
    get:
      consumes:
      - application/json
      description: Inquriry Detail
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Inquriry Detail
      tags:
      - Seller-Inquiry
  /api/v1/seller/inquiries/quotations/{inquiry_seller_id}/create_quotation:
    post:
      consumes:
      - application/json
      description: Create quotion for inquiry
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.InquirySellerCreateQuatationParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.InquirySeller'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Create quotion for inquiry
      tags:
      - Seller-Inquiry
  /api/v1/seller/inquiries/quotations/status_count:
    get:
      consumes:
      - application/json
      description: Get inquiry seller status count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get inquiry seller status count
      tags:
      - Seller-Inquiry
  /api/v1/seller/orders:
    get:
      consumes:
      - application/json
      description: Paginate orders
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Filter status
        in: query
        name: filter_status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/query.Pagination'
            - properties:
                records:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Paginate orders
      tags:
      - Seller-Order
  /api/v1/seller/orders/{id}:
    get:
      consumes:
      - application/json
      description: Order Detail
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order Detail
      tags:
      - Seller-Order
  /api/v1/seller/orders/{order_id}/cards:
    get:
      consumes:
      - application/json
      description: List order card
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderCard'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: List order card
      tags:
      - Seller-Order
  /api/v1/seller/orders/{order_id}/deliveries:
    get:
      consumes:
      - application/json
      description: Order delivery list
      parameters:
      - description: Delivery type
        in: query
        name: delivery_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.OrderDelivery'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order delivery list
      tags:
      - Seller-Order
  /api/v1/seller/orders/{order_id}/payment_transactions:
    get:
      consumes:
      - application/json
      description: Order payment transaction list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.PaymentTransaction'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order payment transaction list
      tags:
      - Seller-Order
  /api/v1/seller/orders/{order_id}/qc_reports:
    get:
      consumes:
      - application/json
      description: Order qc report list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.QcReport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Order qc report list
      tags:
      - Seller-Order
  /api/v1/seller/orders/exports:
    post:
      consumes:
      - application/json
      description: Export orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Export orders
      tags:
      - Seller-Order
  /api/v1/seller/orders/producing_status_count:
    get:
      consumes:
      - application/json
      description: Get order producing status count
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order producing status count
      tags:
      - Seller-Order
  /api/v1/seller/orders/status_count:
    get:
      consumes:
      - application/json
      description: Get order status count
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get order status count
      tags:
      - Marketplace-Order
  /api/v1/seller/products:
    get:
      consumes:
      - application/json
      description: Product List
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Category ID
        in: query
        name: category_id
        type: string
      - description: Shop IDs
        in: query
        name: shop_ids
        type: array
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product List
      tags:
      - Seller-Product
  /api/v1/seller/products/{id}:
    get:
      consumes:
      - application/json
      description: Product Detail
      parameters:
      - description: ProductID
        in: query
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Product Detail
      tags:
      - Seller-Product
    put:
      consumes:
      - application/json
      description: Update Product
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Product
      tags:
      - Seller-Product
  /api/v1/seller/products/{product_id}/delete:
    delete:
      consumes:
      - application/json
      description: Delete Product
      parameters:
      - description: ID
        in: path
        name: Product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.M'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Product
      tags:
      - Admin-Product
  /api/v1/seller/products/create:
    post:
      consumes:
      - application/json
      description: create product
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create product
      tags:
      - Seller-Product
  /api/v1/seller/shop_detail:
    get:
      consumes:
      - application/json
      description: Shop Detail
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Promotion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop Detail
      tags:
      - Seller-Shop
  /api/v1/seller/shop_update:
    put:
      consumes:
      - application/json
      description: Update shop
      parameters:
      - description: ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update shop
      tags:
      - Seller-Shop
  /api/v1/seller/shops/create:
    post:
      consumes:
      - application/json
      description: create shop
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ShopUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create shop
      tags:
      - Seller-shop
  /api/v1/seller/variants/{variant_id}/metafields:
    put:
      consumes:
      - application/json
      description: Update VariantMetafields
      parameters:
      - description: ID
        in: path
        name: variant_id
        required: true
        type: string
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.MetafieldUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Update VariantMetafields
      tags:
      - Admin-Product
  /api/v1/setup_payment:
    post:
      consumes:
      - application/json
      description: Setup payment
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Setup payment
      tags:
      - Marketplace-Payment-Method
  /api/v1/shipping_methods:
    get:
      consumes:
      - application/json
      description: List ShippingMethod
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShippingMethod'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: List ShippingMethod
      tags:
      - Marketplace-Shipping
  /api/v1/shops/{id}/follow:
    post:
      consumes:
      - application/json
      description: Shop Follow
      parameters:
      - description: Shop id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShopFollower'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop Follow
      tags:
      - Marketplace-Shop
  /api/v1/shops/{id}/get:
    get:
      consumes:
      - application/json
      description: Shop Detail
      parameters:
      - description: Shop id
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Promotion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop Detail
      tags:
      - Marketplace-Shop
  /api/v1/shops/{id}/get_product:
    get:
      consumes:
      - application/json
      description: Shop GetProduct
      parameters:
      - description: Shop id
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop GetProduct
      tags:
      - Marketplace-Shop
  /api/v1/shops/{id}/get_promotion:
    get:
      consumes:
      - application/json
      description: Shop GetPromotion
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Promotion'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop GetPromotion
      tags:
      - Marketplace-Shop
  /api/v1/shops/{id}/get_rating:
    get:
      consumes:
      - application/json
      description: Shop GetRating
      parameters:
      - description: Shop id
        in: path
        name: id
        required: true
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop GetRating
      tags:
      - Marketplace-Shop
  /api/v1/shops/{id}/unfollow:
    post:
      consumes:
      - application/json
      description: Shop UnFollow
      parameters:
      - description: Shop id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.ShopFollower'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop UnFollow
      tags:
      - Marketplace-Shop
  /api/v1/shops/low_moq:
    get:
      consumes:
      - application/json
      description: Shop LowMoq
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop LowMoq
      tags:
      - Marketplace-Shop
  /api/v1/shops/search:
    get:
      consumes:
      - application/json
      description: Search Shop
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search Shop
      tags:
      - Marketplace-Shop
  /api/v1/shops/top_48h:
    get:
      consumes:
      - application/json
      description: ShopTop 48h
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop Top48h
      tags:
      - Marketplace-Shop
  /api/v1/shops/top_rated:
    get:
      consumes:
      - application/json
      description: Shop TopRated
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.Shop'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shop TopRated
      tags:
      - Marketplace-Shop
  /api/v1/support/factory_tours/create:
    post:
      consumes:
      - application/json
      description: create FactoryTour
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.FactoryTourUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.FactoryTour'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create FactoryTour
      tags:
      - Marketplace-Support
  /api/v1/support/tickets/create:
    post:
      consumes:
      - application/json
      description: create SupportTicket
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SupportTicketUpdateForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SupportTicket'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: create SupportTicket
      tags:
      - Marketplace-Support
  /api/v1/support/tickets/search:
    get:
      consumes:
      - application/json
      description: Search SupportTicket
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Bearer:
              description: OK
              type: string
          schema:
            $ref: '#/definitions/models.SupportTicket'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Search SupportTicket
      tags:
      - Marketplace-Support
  /api/v1/verifyemail:
    post:
      consumes:
      - application/json
      description: Verify Email
      parameters:
      - description: Form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.VerifyEmailForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Verify Email
      tags:
      - Auth
  /api/v1/webhook/shopify/{shop_name}/inventory_items/create:
    post:
      consumes:
      - application/json
      description: Shopify inventory item create
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shopify inventory item create
      tags:
      - Webhook
  /api/v1/webhook/shopify/{shop_name}/inventory_items/delete:
    post:
      consumes:
      - application/json
      description: Shopify inventory item delete
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shopify inventory item delete
      tags:
      - Webhook
  /api/v1/webhook/shopify/{shop_name}/inventory_items/update:
    post:
      consumes:
      - application/json
      description: Shopify inventory item update
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shopify inventory item update
      tags:
      - Webhook
  /api/v1/webhook/shopify/{shop_name}/product/create:
    post:
      consumes:
      - application/json
      description: Shopify product create
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shopify product create
      tags:
      - Webhook
  /api/v1/webhook/shopify/{shop_name}/product/update:
    post:
      consumes:
      - application/json
      description: Shopify product update
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shopify product update
      tags:
      - Webhook
  /api/v1/webhook/shopify/{shop_name}/shop/update:
    post:
      consumes:
      - application/json
      description: Shopify shop update
      parameters:
      - default: "1"
        description: Keyword
        in: query
        name: keyword
        type: string
      - default: 1
        description: Page index
        in: query
        name: page
        type: integer
      - default: 20
        description: Size of page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Shopify shop update
      tags:
      - Webhook
  /api/v1a/payment_methods:
    get:
      consumes:
      - application/json
      description: Get payment methods
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get payment methods
      tags:
      - Marketplace-Payment-Method
  /api/v1a/payment_methods/{id}:
    get:
      consumes:
      - application/json
      description: Get payment method
      parameters:
      - description: Payment method id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Get payment method
      tags:
      - Marketplace-Payment-Method
  /api/v1a/payment_methods/{id}/detact:
    delete:
      consumes:
      - application/json
      description: Remove payment method
      parameters:
      - description: Payment method id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Remove payment method
      tags:
      - Marketplace-Payment-Method
  /api/v1a/payment_methods/create:
    post:
      consumes:
      - application/json
      description: Add payment method
      parameters:
      - description: Create form
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserPaymentMethodCreateForm'
      produces:
      - application/json
      responses:
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - ApiKeyAuth: []
      summary: Add payment method
      tags:
      - Marketplace-Payment-Method
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
